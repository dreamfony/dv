{"pages":[{"title":"DV","text":"Please see the BLT documentation for information on build, testing, and deployment processes. develop: master: docs Onboarding For building, testing and launching drupal sites we use bundle of scripts called BLT BLT works as a composer plugin. http:\/\/blt.readthedocs.io\/en\/latest\/INSTALL\/ http:\/\/blt.readthedocs.io\/en\/latest\/readme\/onboarding\/ Setup github-todos npm install -g github-todos in project root run github-todos config repo dreamfony\/dv github-todos init if you get Error: ENOENT: no such file or directory, open '.git\/hooks\/pre-push' cd .git mkdir hooks github-todos init github-todos config inject-issue true github-todos config confirm-create false Highly recommended if you are using local machine for work Install drush on your local machine http:\/\/docs.drush.org\/en\/8.x\/install-alternative\/ make sure drush aliases are set for remote (should be automatically set per drupalvm config, if not do it manually, search this part &quot;drush\/site-aliases\/aliases.drushrc.php&quot; on this link https:\/\/www.jeffgeerling.com\/blog\/2017\/soup-nuts-using-drupal-vm-build-local-and-prod Install drupal console on your local machine https:\/\/docs.drupalconsole.com\/en\/getting\/project.html run &quot;drupal init&quot; to copy configuration if not mentioned and add alias manually to proper place https:\/\/docs.drupalconsole.com\/en\/alias\/connecting-to-a-virtual-environment.html with above, you can run git\/drush\/drupal console commands all on local machine, with no need to go to remote. Frontend node_modules directory should be deleted if it is created from inside VM Pushing Local changes and Ongoing development export configuration into feature git commit git pull \/ merge \/ create pull request blt local:refresh (which does) composer install enable \/ uninstall local modules config-import --partial updb config-import --partial drush fra -- bundle (bundle names are defined in project.yml) drush cr git push Automated testing ensures that the feature can be installed from scratch on a new site as well as imported without conflicts on an existing site. After the feature is deployed, deployment hooks automatically import the new or updated configuration. In the beginning of the project life cycle we use blt local:setup to reinstall drupal, instead of blt local:refresh so we dont have to write hook_updates when we do big structural configuration changes. When the site goes to production then local:refresh is enough. &lt;target name=&quot;local:refresh&quot; description=&quot;Refreshes local environment from upstream testing database.&quot; depends=&quot;setup:build, local:sync, local:update&quot;\/&gt; Updating Module When updating module, it can happen that modules configuration has changed. Thats why the process of updating module is: composer update drupal\/{module_name} on features page check if configuration has changed export feature if neccessary only now you can push or pull and refresh local If someone pushes lock file with new updated module and doesnt export configuration, then when other persons pull and do local:refresh they will override new configuration of the module with the old! BLT update http:\/\/blt.readthedocs.io\/en\/8.x\/readme\/updating-blt\/ during update BLT will change some files so its necesserry to examine composer.json, .gitignore, .project.yml etc. Various Continuous Delivery http:\/\/blt.readthedocs.io\/en\/latest\/readme\/ci\/ The repository is never pushed directly to the cloud. Instead, changes to the repository on GitHub trigger tests to be run via Continuous Integration. Changes that pass testing on master branch will automatically cause a build artifact to be created and deployed to the cloud. We use Travis for CI If you don\u2019t want to run a build for a particular commit for any reason add [ci skip] or [skip ci] to the git commit message. Commits that have [ci skip] or [skip ci] anywhere in the commit messages are ignored by Travis CI. Phing Common project tasks are executed via a build tool (Phing) so that they can be executed exactly the same in all circumstances. Custom and overridden Commands can be found in \/custom\/blt_custom_phing_commands.xml Phing Variables are here https:\/\/github.com\/acquia\/blt\/blob\/8.x\/phing\/build.yml To use syslog instead of DB log blt pimpmylog Acquia Cloud Hooks post-code-update.sh blt deploy:update db-scrub.sh scrubs db before copy from production TODO - test Cron You should use the Scheduled Jobs page for scheduled jobs, rather than the default Drupal cron or any of the contributed cron modules, such as Elysia Cron or Ultimate Cron . Compared to other cron solutions, using the Scheduled Jobs page is more reliable and provides extensive and integrated logging for Acquia Cloud applications. The default Drupal cron (poor man's cron) is enabled by default and you should disable it. Click Never. drush core-cron BlackFire create account on blackfire.io enter server and client id https:\/\/github.com\/geerlingguy\/ansible-role-blackfire#requirements Restart appache after init and registration sudo \/etc\/init.d\/blackfire-agent restart sudo systemctl restart apache2.service blackfire curl http:\/\/local.dv.com\/ Testing http:\/\/blt.readthedocs.io\/en\/latest\/readme\/testing\/ Github In order to more easily identify developers in a project, please be sure to set a name and profile picture in your GitHub profile. Tools https:\/\/chrome.google.com\/webstore\/detail\/octotree\/bkhaagjahfmjljalopjnoealnfndnagc https:\/\/github.com\/github\/hub Drush Check that your drush alias is set up correctly \/var\/www\/dv\/docroot drush @dv.local status To be able to use drush from any folder for this site and in this session type: drush use @dv.local Drupal Console TODO Initialize drupal console after provision Phpstorm You can SSH to Vagrant machine using phpstorm by ShiftShift, type: Start SSH TODO - repo with shared liveTemplates https:\/\/www.drupal.org\/project\/phpstorm_templates and sharing of code snippets via gists or snip2code https:\/\/youtrack.jetbrains.com\/issue\/IDEA-155623 TODO END Composer http:\/\/blt.readthedocs.io\/en\/latest\/readme\/dependency-management\/ We use composer to build our dependencies, add patches etc.. , that means you do not use drupal console or drush to download modules but you do it with composer. You must run composer from DV root folder, not docroot composer global require &quot;hirak\/prestissimo:^0.3&quot; Add dependencies composer require drupal\/devel:8.* examples: Latest stable that is greater then or equal to 1.0 ^1.0 Always Dev (ignore stables) 1.x-dev Exact version 1.14 ^ - sticks to semantic versioning, and will always allow non-breaking updates. ~1.2.3 is equivalent to &gt;=1.2.3 &lt;1.3.0 vs. ^1.2.3 is equivalent to &gt;=1.2.3 &lt;2.0.0 Update dependencies (core, profile, module, theme, libraries) composer update drupal\/panels --with-dependencies Remove dependencies composer remove drupal\/pathauto When adding new patch you can just update existing project and patch will be applied. Debuging if u need to debug drush or any site code that is initiated within drush (PHP CLI) follow this tutorial In PhpStorm set up a \u201cPHP Web Application\u201d for debugging the command line. The sole purpose of this is to be able to provide a path mapping when running the command in Vagrant. Enable xdebug debugging for the command line in your Vagrant box. In my case, this simply meant symlinking the same xdebug.ini from my \/etc\/php5\/cli\/conf.d directory as I was using in the \/etc\/php5\/apache\/conf.d for web debugging. export XDEBUG_CONFIG=&quot;idekey=phpstorm remote_host=192.168.33.1&quot; export PHP_IDE_CONFIG=&quot;serverName=cli&quot; ..\/vendor\/drush\/drush\/drush.launcher status Twig Debugging services.local.php twig.config debug:true TODO blt clidebug blt clidebug --on i off ili tako nesto pametno za palit gasit xdebug mozes koristit sudo phpenmod -s cli xdebug i phpdismod TODO END Configuration Management http:\/\/blt.readthedocs.io\/en\/latest\/readme\/features-workflow\/ The main use case for Features 3.x is to assist with building and maintaining well designed and interoperable Drupal distributions. As great as CMI is in Drupal 8, it is likely that you will still want to use Features to organize your configuration as you develop your site. Whether you use Features or CMI (or both) to deploy your development into production is your choice. In my narrow experience with features on Drupal 8, I've found the &quot;features for development and config for deployment&quot; idea, the more natural way to do it Sites will often need to contain a single &quot;sitewide&quot; feature that defines global configuration and is required by all other features. This can be viewed as a &quot;core&quot; feature but should not be abused as a dumping ground for miscellany. Our core feature module is dv_core Sharing configuration of development modules and different configuration for differnet environments Instead of using conf_split module, we store partial various configuration that is used only in devel environment in config\/devel folder. This should be in your local.settings.php $config_directories['devel'] = $dir . &quot;$config_directories['devel'] = $dir . &quot;\/docroot\/profiles\/dv\/modules\/environment\/dmt_devel\/optional&quot;; Import with drush cim devel --partial Configuration files that should be exported to that module are listed in dmt_devel.info.yml And should be exported with the help of config_devel module using drush config-devel-export dmt_devel Also you can use configuration override system in local.settings.php Exclude settings from beeing exported in features by configuring features bundle Modules that should be enabled uninstalled for each environment are listed in project.yml Production configuration is made read only using https:\/\/www.drupal.org\/project\/config_readonly All site code should reside in docroot\\profiles\\custom\\dv There are many reasons that features can fail to install or import properly. The most frequent cause is circular dependencies. For instance, imagine that feature A depends on a field exported in feature B, and feature B depends on a field exported in feature B. Neither feature can be enabled first, and site installs will break. A safer alternative is to create a separate wrapper module to contain any custom functionality and have this module depend on your feature in order to segregate Feature-managed and manually-managed code. Hook_updates https:\/\/www.drupal.org\/docs\/8\/api\/update-api\/updating-configuration-in-drupal-8 All site specific configuration updates should be written in dv_core.install TODO add snippets for Deleting a field Reverting features and feature components features_revert_module() Enable \/ disable module module_enable() Adding indexes to databases db_add_index() For specific use cases see https:\/\/www.drupal.org\/project\/hook_update_deploy_tools also we will continuously update this document as we find out which things can not be deployed through features and must be deployed using hook_updates Environments We have 4 environments Local environment build with vagrant and 3 remote environments which reside on Acquia Devel ( master-build branch) Staging (master branch) Live (TAG from master) We are using an install profile driven development. Install profile is build by features. We will also for now deploy site with features although this is not best practice. Best practice would be to Clone DB from Live env to Staging env Revert Features on Staging env Test Export Configuration on Staging and push to master git TAG release Import Configuration on Live Other options include installing site from existing configuration either with drush --config option or with config_installer profile which also sets site UUID from existing configuration. Managing roles and permissions Features is patched so that it exports permissions with roles Managing Secrets (TODO) exlude this settings from beeing exported in features bundle settings \/\/ Store API Keys and things outside of version control. \/\/ @see settings\/sample-secrets.settings.php for sample code. $secrets_file = sprintf('\/mnt\/gfs\/%s.%s\/secrets.settings.php', $_ENV['AH_SITE_GROUP'], $_ENV['AH_SITE_ENVIRONMENT']); if (file_exists($secrets_file)) { require $secrets_file; } Using Features Bundles Config vs. content If exported configuration view will contain a defined dependency on a content object (referenced by UUID). If that content doesn\u2019t exist when the feature is installed, the installation will fail. The solution is to make sure that the referenced content exists before the feature is installed. Use the default_content module to export the referenced content as JSON files, and store these files with your feature or in a dependency. TODO Create default_content module just for that Local Settings local.settings.php Naming Conventions We utilize Features Namespace assignment plugin so For example, a date field specific to events and attached to an event content type could be named field_event_date, while a vocabulary of event types could be named event_type, with a corresponding entity reference field of field_event_type on the event content type. By following this naming convention, you ensure that by default your event-related field storages and taxonomies are assigned to the event feature. Release Process It is expected that at this point build artifact has been deployed to master-build on dev. master-build has been merged to master on stage. Db from live has been copied to stage. Put the site into maintenance mode drush vset maintenance_mode 1 Flush Caches to empty the cache tables and ensure maintenance mode is set. drush cc all Perform any necessary backups, notably the database drush sql-dump &gt; backup-yyyy-mm-dd.sql (or via UI) Pull the latest code onto the server git pull origin\/master (Drag&amp;Drop in UI) Doing this in Acquia UI will tag release. Run update.php drush updb -y Feature should be explicitly reverted via a call to features_revert_module() in a hook_update_N() Take the site out of maintenance mode drush vset maintenance_mode 0 Clear Drupal caches drush cc all Deployment to a staging server is fully automated. No gradual roll out and roll-back if required. Coding standards All of the code should comply to the coding standards defined on drupal.org\/coding-standards. Source control and branching Gitflow with a mandatory Code Review The master branch should always be in a stable state. When working on specific bugs, features or improvements you should always work in a separate branch (preferably prefixed with feature\/) which can eventually be merged into master. Definition of done We consider the work of the developer done when: Functionality passes the acceptance criteria Manual test is provided, modified if needed and passing Automated test is provided if needed and passing Code complies to Drupal coding standards A pull request is created, assigned to a reviewer and How-To-Test are provided CI build is passing If issue type is bug, a short description of the solution is provided The issue has been set to a reviewer with the correct status We consider the work of the reviewer done when: The code looks good The How-To-Test steps can be executed The manual test is executed successfully The pull request is merged into the correct branch The issue has been completed Code review guidlines Ask questions rather than state facts when critiquing. Scratch each other\u2019s back w\/constructive criticism. Practice egoless programming, separate the work from the person. Direct comments to the work product, not to the author. Commit messages guidelines Various Comments should not reiterate code but explain the why behind its design. Readable code will explain the what and how, therefore prefer good names and documentation over comments. Good bug reports must, at a minimum: Should not be a duplicate; search the existing before creating new ones. Have a concise summary Have a specific factual details: What was expected, and what happened. Precise steps to reproduce Severity Tips &amp; Tricks TODO","tags":"","url":"index.html"},{"title":"Contribute code","text":"Contribute code to upstream repository Sync the fork with upstream repository relations: Create new branch meta: tools: GitHub git fetch upstream git checkout develop git rebase upstream\/develop git push Create new branch relations: Commit the code git checkout -b dreamfony\/dv#issueNumber-[feature \/ fix \/ misc] Commit the code relations: Push the branch git status git add [file1] [file2] git commit -m &quot;dreamfony\/dv#issueNuber Description shorter than 50 characters&quot; Push the branch relations: Open or update a Pull Request git push -u origin new_branch_name Open or update a Pull Request relations: CI status check, Update issue status, Notifications meta: tools: GitHub hub Tips for PR Authors Once the pull request is ready for review, add reviewers to it through the web interface Using GitHub UI Create a pull request from newly pushed branch. Using hub hub pull-request Using PhpStorm VCS-&gt;GIT-&gt;Create Pull Request CI status check relations: Discuss and peer review Code meta: roles: System tools: Travis Update issue status meta: roles: System tools: Waffle.io Move Issue to Review column Notifications meta: roles: System tools: Slack Discuss and peer review Code relations: Pull request accepted|Deploy, Pull request rejected|Commit the code meta: tools: GitHub Tips for PR Reviewers Review the changes in the pull request, and optionally, comment on specific lines. Deploy meta: tools: GitHub Acquia","tags":"","url":"Processes\/Contribute_code.html"},{"title":"Install project","text":"Install project Requirements To use our build system and run documentation locally you will need Fresh installation of Ubuntu 16.04 LTS Github account and then follow the steps bellow: Setup local environment relations: Fork the repository Upgrade Linux do-release-upgrade sudo reboot Install and configure git sudo apt-get install git -y git config --global user.name &quot;github_username&quot; git config --global user.email &quot;github_email&quot; Fork the repository relations: Clone the forked repository Go to DV and fork a repository Clone the forked repository relations: Add upstream repository sudo mkdir \/var\/www\/dv -p sudo chown $USERNAME:$USERNAME \/var\/www\/dv cd \/var\/www git clone https:\/\/github.com\/github_username\/dv #Add upstream repository git remote add upstream https:\/\/github.com\/dreamfony\/dv.git Install project requirements relations: Test the installation bash \/var\/www\/dv\/install\/install.sh Project requirements are installed using ansible playbooks taken from drupal VM Install.sh script will among other things run composer install blt custom:reinstall Test the installation Visit local.dv.com","tags":"","url":"Processes\/Install_project.html"},{"title":"Workflow","text":"Workflow Development relations: Code repository meta: roles: Developer DevOps tools: Drupal Test h3 I ondak nastavis tu pisati sta te volja! Bla bla bla ... Trrrttt Code repository relations: Documentation, test|Continuous integration meta: roles: Developer DevOps tools: Drupal Documentation meta: roles: Developer DevOps tools: daux.io Documentation in docroot\/profiles\/dv\/docs contains: daux theme docs folder where the actual markup files reside global.json for daux configuration Access documentation locally by $daux serve in docroot\/profiles\/dv\/docs Continuous integration relations: Notifications meta: roles: Developer DevOps Notifications relations: Test passed? meta: roles: Developer DevOps tools: Drupal Test passed? type: decision relations: Yes|Artifact, No|Development Artifact relations: Jos jedan meta: roles: DevOps tool: &quot;Travis&quot;","tags":"","url":"Processes\/Workflow.html"},{"title":"linux","text":"Linux installation instructions Linux - Ubuntu\/Mint Ctrl + Alt + T to open terminal. - do-release-upgrade - sudo reboot Fork https:\/\/github.com\/dreamfony\/dv git repository. - sudo apt-get install git -y - git config --global user.name &quot;John Doe&quot; - git config --global user.email &quot;email@example.com&quot; - sudo mkdir \/var\/www\/dv -p - sudo chown your_linux_user_name:your_linux_user_name \/var\/www\/dv - cd \/var\/www - git clone your forked repo - bash \/var\/www\/dv\/install\/install.sh Logout as your linux user and log back in to get zsh to work. if you get some weird page on local.dv.com clear chrome caches todo: add adminer to \/etc\/hosts install phpmyadmin ? figure out weather we want to keep built css files in repo PHPSTORM Install https:\/\/www.jetbrains.com\/phpstorm\/download\/#section=linux Plugins: .ignore Drupal Symphony Bridge set code style to Drupal PHP Debug Follow instructions https:\/\/www.shooflydesign.org\/buzz\/configuring-phpstorm-to-debugging-command-line-php-scripts Set xdebug port 9001 Max connections 20 (to be on a safe side) Turn off all Break on first line checkboxes there should be 3 of them - sudo phpenmod -v 7.0 -cli xdebug - sudo service php7.0-fpm restart - export XDEBUG_CONFIG=&quot;idekey=PHPSTORM&quot; ~ export PHP_IDE_CONFIG=&quot;serverName=localhost&quot; Additional software Chrome (required) https:\/\/www.google.com\/chrome\/browser\/desktop\/index.html Make sure you pick Ubuntu version. TeamViewer (required) https:\/\/download.teamviewer.com\/download\/linux\/teamviewer_amd64.deb Flux - sudo add-apt-repository ppa:nathan-renniewaldock\/flux - sudo apt-get update - sudo apt-get install fluxgui Pinta - sudo add-apt-repository ppa:pinta-maintainers\/pinta-stable - sudo apt-get update - sudo apt-get install pinta","tags":"","url":"Install\/linux.html"},{"title":"vm","text":"VM installation instructions System requirements Make sure you have the latest versions of packages Git git flow Composer PHP 5.6+ If you are on Ubuntu you will also need additional php packages sudo apt-get install php-xml sudo apt-get install php7.0-mbstring sudo apt-get install php-curl Vagrant (comes with virtualbox \/ ansible) nodejs (for patternLab; it should install gulp \/ bower etc) First Time Installation @todo: update this with instructions when forking repos and making pull requests) sudo apt-get install php7.0-bz2 git clone https:\/\/github.com\/dreamfony\/dv.git cd dv git checkout develop obtain dv_secure module directory from stakholders and put it in proper place \/dv\/docroot\/profiles\/dv\/modules\/dv_features\/dv_secure (* we should make this more automatic) composer install vagrant up vagrant ssh cd \/var\/www\/dv composer blt-alias (restart ssh terminal: exit \/ vagrant ssh) go to \/var\/www\/dv\/blt\/project.local.yml and add environment: 'local' cd \/var\/www\/dv blt setup cd docroot drupal init to install alias for blt on local machine, run &quot;sudo composer run-script blt-alias&quot; blt custom:import-content Vagrant VM on Windows https:\/\/www.jeffgeerling.com\/blog\/2017\/drupal-vm-on-windows-fast-container-blt-project-development Install the Vagrant::Hostsupdater plugin with vagrant plugin install vagrant-hostsupdater which will manage the host\u2019s \/etc\/hosts file by adding and removing hostname entries for you vagrant plugin install vagrant-cachier vagrant plugin install vagrant-vbguest On windows you have to do multiple things to make NFS sharing work 1. vagrant plugin install vagrant-winnfsd 2. COPY EXAMPLE FILES from custom folder local.config.yml Vagrantfile.local 3. Download and run WinNFSd.exe C:\\DV 4. Delete node_modules folder to make it speedier 5. Sometimes also settings.php needs to be chmod ed It works with thoose 4 steps, no single article online is correct But some info and code parts can be found at: https:\/\/hollyit.net\/blog\/windowsvagrantwinnfsd-without-file-update-problems http:\/\/docs.drupalvm.com\/en\/latest\/other\/performance\/#improving-performance-on-windows after that you will have to destroy machine and provision it again vagrant destroy vagrant up {{BUG}} On MAC we had to change VirtualBox Machine network setting: Adapter1 \/ NAT \/ Cable connect BLT uses DrupalVM Configuration file can be found at \/box\/config.yml For local overrides use local.config.yml DrupalVM configuration file settings are used in both vagrantfile and ansible playbook.yml Thats why sometimes it is necessary to re provision machine depending on what settings you change inside file. DrupalVM Configuration is merged: config.yml local.config.yml The merge of the variables in these two files is shallow, so if you want to override a single item in a list, you will need to re-define all items in that list. commands vagrant up vagrant halt vagrant reload vagrant login #share http vagrant share #share ssh vagrant share \u2013ssh","tags":"","url":"Install\/vm.html"},{"title":"activity comment","text":"Activity Comment Comments attached to Content node bundle. We are using forked Ajax Comments contrib. module with some minor changes. Every activity entity from bundle mailing_list_activity when inserted creates a comment in this bundle that references created activity form Comment Activity field. That comment is used as a place holder for answers and other comments for that activity. Fields: Comment Activity Entity reference to activity entity","tags":"","url":"Architecture\/activity_comment.html"},{"title":"activity delivery error message","text":"Activity Delivery Error Admin link Settings: subject: Delivery error when sending Email message occurred body: Delivery error occurred when sending email to [organisation_link]. Please check the organisation email address and try to resend. [activity_comment_link]. recipients: moderator","tags":"","url":"Architecture\/activity_delivery_error_message.html"},{"title":"answer comment","text":"Answer Comment Answer comment is a comment type used to store only answers from organisations possibly other users. Comments attached to Content node bundle. We are using forked Ajax Comments contrib. module with some minor changes. Fields Answer (body) Attachments (files) Display Modes Default only","tags":"","url":"Architecture\/answer_comment.html"},{"title":"content","text":"Content All related code should be placed in dmt_content module. Content is a bundle of node entity (Content type). Fields: Title Title is hidden and it is generated in presave hook in dmt_content module Content type Currently missing field that should be choice field with options like: Question Issue Story Content (body) Answer format Current options: Text Numeric Yes\/No\/Sustain Attachments File attachments We need to configure attachment types here We send these in email Answers Field that references comments (answer, activity) Views: Mailing list items is used to show questions in Figure 1","tags":"","url":"Architecture\/content.html"},{"title":"default comment","text":"Default Comments Default Comments is a comment type used for commenting any Content has no special purpose. Comments attached to Content node bundle. We are using forked Ajax Comments contrib. module with some minor changes.","tags":"","url":"Architecture\/default_comment.html"},{"title":"documentation","text":"If we will need customization or better looking documentation. we can host mkdocs on Github Pages https:\/\/github.com\/squidfunk\/mkdocs-material","tags":"","url":"Architecture\/documentation.html"},{"title":"geoarea","text":"","tags":"","url":"Architecture\/geoarea.html"},{"title":"log comment","text":"Log Comment This comment is suppose to show log messages what is happening with the activity like Closed, Resolved, Sent and so on. Something similar to Node Changes contrib. module D8 port attempt","tags":"","url":"Architecture\/log_comment.html"},{"title":"mailing list","text":"Mailing List All related code should be placed in dmt_mailing_list module. Tests Survey.feature Pages Create Survey page Survey header - region Edit Title - link Title Survey recipients add - region Add recipients - autocomplete field Add recipients - button Survey recipients list - region Recipients - view Remove recipient - link - view row Recipient - view row Organisation Profile - display mode Name - field Address - field Survey content add - region Survey content add - form Content - field Type - field Attachments - field Submit - button Survey content list Survey content - view Content Teaser - display mode Edit - link Remove - link Content - field view Type - field view Attachments - field view Survey view page View of all recipients Mailing List is a bundle of group entity Fields Group Comments Is used to store comments on particular Survey probably just for moderation purposes. Comments are handled by ajax_comments module and dmt_group_comments module. Panelizer Is used for storing current view mode for the group. View modes Full Full view mode is split in to 2 sub modes with panelizer contrib. module Mailing List Default - Used for survey creation ui see Content see Mailing List Recipients Default - Used for Viewing the survey using Mailing List Answers :: Group By Recipient view Comments My Survey Teaser Group content plugins Group node (Content) Is used to add content to the group. Group membership Member roles: Organisations Edit Mailing List - Special role used to allow editing - not sure where it is used right now Owner - Is the owner\/creator of the survey Moderator - Survey moderators Mailing list workflow States Draft [draft] Email [email] Approved [approved] Archived [archived] Spam [spam] Transitions Create new Draft [create_new_draft] from: [draft] to: [draft] Create new Draft transition is never used find a way to remove it if possible Create new Draft from: Draft x: ttrtt p: jkfjkdkfjdik to: Email link: http:\/\/www.google.com Send Email send_email plugin from: [draft] to: [email] uc: [x] own - triggers this transition [x] sys - validates [mailing_list] contains &gt; 0 content and &gt; 0 recipients [x] sys - remove administrator role from the mailing_list [x] sys - send mailing_list_needs_approval message Approve Sending approve plugin from: [email] to: [approved] uc: [x] mod - triggers this transition [x] sys - validates [mailing_list] contains &gt; 0 content and &gt; 0 recipients [x] sys - gets all the content form group of type [group_node:content] [x] sys - foreach group content gets referenced entity [node] of type [content] and triggers [create_activity_action] [x] sys - triggers [close_mailing_list_ticket] for the mailing_list Archive [archive] from: [draft], [email], [approved] to: [archived] Restore to Draft [restore_to_draft] from: [send_email] to: [draft] uc: [ ] sys - adds administrator role to user that created [mailing_list] Spam [spam] from: [draft] to: [spam] uc: [ ] sys - adds mailing list to queue to be deleted","tags":"","url":"Architecture\/mailing_list.html"},{"title":"mailing list activity","text":"Mailing List Activity All related code should be placed in dmt_mailing_list_activity module. Mailing List Activity is a bundle of activity entity Fields Destinations [field_activity_destinations] type: List (text) Entity [field_activity_entity] type: Entity reference content Hash [field_activity_hash] type: Text (plain) hash is generated with ActivityLoggerRandom and the field is populated in ActivityFactory Mailing List [field_activity_mailing_list] type: Entity reference mailing_list Message [field_activity_message] type: Entity reference question message Output text [field_activity_output_text] type: Text (formatted, long) Recipient group [field_activity_recipient_group] type: Entity reference not used but we wont remove it since its tied deep in to activity base module Recipient user [field_activity_recipient_user] type: Entity reference user Reply [field_activity_reply] type: Entity reference answer (comment) View modes Comment Activity Moderation Information Reply Mailing List Activity Workflow States Pending States Pending (Waiting to be sent) [p_waiting] Pending (Delivery Error) [p_delivery_error] Pending (Rejected) [p_rejected] Pending (Auto response) [p_auto_response] Awaiting Response States Awaiting Response (Sent) [ar_sent] Awaiting Response (Seen) [ar_seen] Awaiting Response (Delayed) [ar_delayed] Awaiting Classification States Awaiting Classification [unclassified] Finished States Finished (Successfully) [f_answered] Finished (Successfully with delay) [f_delayed] Finished (Unsuccessfully) [f_unsuccessful] unsatisfactory answer and timed out Finished (Expired) [f_expired] Timed out Finished (Need more info) [f_more_info] Canceled States Canceled [canceled] Transitions Mark as Delivery error [delivery_error] (maybe change to sending error, is there a way to check if mail was delivered to the sender?) from: [p_waiting] to: [p_delivery_error] triggers: system - mail service returns delivery error response uc: [ ] sys - sends [activity_delivery_error] message [ ] mod - checks the validity of email address edits if necessary [ ] mod - clicks Mark as Pending (Waiting to be sent) Mark as Pending (Waiting to be sent) [waiting] form: [p_delivery_error] to: [p_waiting] uc: [ ] mod, (own?) - triggers [waiting] transition [ ] sys - triggers [email_activity_send] action @see activity_send_email_activity_insert Pending (Auto response) [auto_response] form: [unclassified] to: [p_auto_response] uc: [ ] mod, own - triggers [auto_response] transition [ ] sys - adds flag on organisation that it sends auto response messages make a module to handle auto response messages will be used as one of the criteria to automatically set messages as auto_response other criteria may include response time, message subject Detecting autoresponders Mark as Sent [sent] from: [p_waiting] to: [ar_sent] uc: [ ] sys - mail service returns sent response; if not possible mail sent to mailing service Mark as Seen [seen] - from: [ar_sent] - to: [ar_seen] uc: [ ] sys - when mail service returns seen response, trigger this transaction Mark as Answered [answer] from: [p_waiting], [ar_sent], [ar_seen] to: [f_answered] uc: [ ] sys - check if Cancel [cancel] from: [p_waiting], [p_delivery_error], [ar_sent], [ar_seen] to: [canceled] uc: [ ] sys - unpublishes related [activity_comment]","tags":"","url":"Architecture\/mailing_list_activity.html"},{"title":"mailing list needs approval message","text":"Mailing List Needs Approval Admin link Settings: subject: Mailing list needs approval. body: Mailing list [link_to_mailing_list] needs approval. recipients: moderator","tags":"","url":"Architecture\/mailing_list_needs_approval_message.html"},{"title":"mailing list recipients","text":"Mailing List Recipients All related code should be placed in dmt_mailing_list_recipients module. Module handles ui elements and business logic for adding\/removing recipients to the mailing list. Module defines: Recipients service. Has one method for adding recipients to the mailing_list group. RecipientsForm Block which contains Recipients Form which has two elements recipient auto complete field and submit button. Block is added to the mailing list view mode via panelizer. Recipients Delete Link field for views and Recipients Controller and Route for delete link.","tags":"","url":"Architecture\/mailing_list_recipients.html"},{"title":"moderation","text":"","tags":"","url":"Architecture\/moderation.html"},{"title":"moderation activity","text":"","tags":"","url":"Architecture\/moderation_activity.html"},{"title":"organisations","text":"Organisations Pages View Organisation Block Organisation details form Profile Name Phone Email Group bundle &quot;organisation&quot; Fields Currently organisation group has no fields View modes Default Showing different types of organisations could be solved with panelizer like in mailing_list group Group content plugins Group node (Content) Is used to add content to the group. Group membership Member roles: Organisation Moderator Membership history - currently does not exist The idea behind this plugin is to better solve what positions entity is doing currently Get some ideas form: https:\/\/www.drupal.org\/node\/2801603#comment-12031080 User Every organisation has its own user entry. Profile bundle &quot;organisation_profile&quot; Every organisation has a organisation_profile. Using Profile contrib. module Import Organisations are imported from xml file using Hr Organisations Module","tags":"","url":"Architecture\/organisations.html"},{"title":"positions","text":"Positions All code for positions is currently in dmt_positions module. We need to find a better way to do this there is a one suggestion in organisations that handles this via Membership history plugin.","tags":"","url":"Architecture\/positions.html"},{"title":"question message","text":"Question Message \/\/ document Question mail template \/\/ current template is called Content is hardcoded to Croatian language \/\/ and does not have recipient-data and sender-data tokens Admin link Settings: subject: ? body: [activity:recipient-data] [activity:sender-data] Molimo odgovoriti na sljede\u0107e pitanje [message:node-body] Molimo da kada odgovarate na pitanje koristite sljede\u0107i email: [activity:replyto-email] recipients: question recipient","tags":"","url":"Architecture\/question_message.html"},{"title":"recieving emails","text":"Receiving Emails - Mail IN inmail contrib. module dmt_mail module ToAnalizer gets hash from email @see Mailing list activity field Hash dmt_mailing_list module InMailAnswer uses hash to create answer for the right content Auto response handling split ToAnalizer in two ToAnalyzer and HashAnalyzer ToAnalyzer should have only findTo method HashAnalyzer findHash implement ActivityAnalyzer: use HashAnalyzer result findActivity (set Context Activity entity) return activity context = activity entity implement SentTimeAnalyzer implement AutoreponseAnalyzer in dmt_mail module implement config field for difference check int in seconds http:\/\/cgit.drupalcode.org\/mailhandler\/tree\/src\/Plugin\/inmail\/Handler\/MailhandlerNode.php?h=8.x-1.x use findActivity result to: get last revision from activity with [sent] moderation state if SentTimeAnalyzer[time] - [ar_sent] &lt;= config value set context autoresponse bool use the result in InMailAnswer to ignore autoresponse mails make changes to InMailAnswer to use ActivityAnalyzer context to get the entity implement ActivityHandler in dmt_mail: copy whole InMailAnswer remove Answer specific stuff InMailAnswer should only have invoke method that calls parent::invoke and the part of the code specific for Answer","tags":"","url":"Architecture\/recieving_emails.html"},{"title":"sending emails","text":"Sending Emails - Mail OUT in develop environment we use hook_mail in dmt_dev to reroute all emails to a single for testing purposes message contrib. module Activity Module Suite how it works: Create Activity Action creates an entry in activity_logger_message queue. Process 1 activity_logger_message Message Queue Creator adds item back to queue if it is not older than 5 seconds or creates a message using Activity Logger Factory::createMessages for each created message activity_creator_message_insert hook in Activity Creator Module prepares variables and adds item to activity_creator_logger queue. Process 2 activity_creator_logger Activity Worker Logger worker gets the Recipients from context and adds them to activity_creator_activities queue. Process 3 activity_creator_activities Activity Worker Activities worker creates the activities. Process 4 activity_send_email_worker process is used if activity needs to be sent by email Activity Send Email Worker worker. Mailgun service using contrib module mailgun dmt_mail module: Webhook is configured here. Event Subscriber creates items for Queue Worker","tags":"","url":"Architecture\/sending_emails.html"},{"title":"user","text":"User Personas Roles","tags":"","url":"Architecture\/user.html"},{"title":"architecture","text":"Architecture - Getting around Main high level features overview Content (node) Answer (comment) Activity (comment) Default Comment (comment) Log (comment) Organisations (user, group, profile) Positions (custom entity) Mailing List (group) Mailing List Activity (activity) Mailing List Recipients Sending Emails Receiving Emails Moderation [] Geo Area (node, group) Support modules Moderation state machine Moderation state machine chain Ajax Comments Experimental: Domain Config Moderation Group User Groups","tags":"","url":"architecture.html"},{"title":"features","text":"Features Behat tests tips: blt tests:behat:definitions shows all defined assertions blt tests:behat runs all behat tests without @skip tag blt tests:behat -D behat.tags=@f1s1 runs only a test with @f1s1 this does not ignore @skip tag Survey Goal: Fight the corruption and crime like Batman. Scenarios: Try to send Survey before filling in Content and Recipients I click on Create Survey previously changing only the title I click on Create Survey more than once without any changes Successfully Create Survey Organisations Scenarios: Add new Organisation Edit existing Organisation View existing Organisation Find existing Organisation Positions This needs to be refactored to use group membership in organisations Moderation Scenarios: moderation.feature: Visit Moderation Dashboard OrganisationModeation.feature Moderate Organisation Emails tttretrt Successfully Approve Survey User Profile User Account Login Register Change account details","tags":"","url":"features.html"},{"title":"issue template","text":"Bug report","tags":"","url":"issue_template.html"},{"title":"story workflow","text":"Story workflow Add Ideas (TM) Adds idea to Waffle Idea inbox In a story form Write stories Format: As a -persona-, I want -feature- so that -reason-. Research\/Discovery (PO) Research potential ideas Add the story to the backlog. (PO, SM) Set the story priority. (PO) Set arbitrary story value. (PO) Sprint Backlog refinement - grooming (TEAM + PO) Make a wire frames if necessary. Write the Behat scenarios Make a high level solution for the stories (architecture) Team estimate Split the story in to tasks Ops Bussiness Logic Behat test Backend Frontend Js Twig Css Design Sprint planing every 14 days on Monday (SM) Pick a Sprint Theme Pick stories that are releated to Sprint Theme Present the stories (PO) Select the Story Owner Move to NEXT Develop new stories (DEV TEAM) Create a git branch for the story Develop the story in its own branch Report Blockers (github label?) Blocker is something you are working on for more than 8 hours without any progress Pull request review for the story Prepare for sprint review (day before) After sprint finish organise a sprint review (SM) Present what has been done for each story (Story Owner) If we are satisfied with the story merge in to develop Update change log from pull request comments If story is not completed send it to backlog Retrospective - Process refinement (SM) Brainstorm ideas on how to make dev process more efficient Update documents This document Project processes documentation","tags":"","url":"story_workflow.html"},{"title":"tools","text":"Tools \/ technologies Name Purpose \/ Scope Description Learn more Waffle.io Project management Waffle is a project management solution for your GitHub repositories. GitHub issues and pull requests transform into cards on a board making it easier to plan, organize, and track your work across one or many repositories. Waffle.io Behat Automated tests, Documenting system requirements Behat is a test framework for behavior-driven development. It allows the clear documentation of testable examples of the software's intended behavior. Behat Drupal Content management system Drupal is an open source content management system used for creating web pages and applications. Drupal GitHub Code repository GitHub is a Web-based Git version control repository hosting service. It is mostly used for computer code. It provides access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. GitHub Travis CI Continuous integration Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub. Travis CI slack Team chat, Notifications Slack is a cloud-based set of proprietary team collaboration tools and services. Slack Acquia Server hosting Acquia is a company which provides enterprise products, services, and technical support for Drupal. Acquia Hangouts Team video calls Google Hangouts is a communication platform developed by Google which includes instant messaging, video chat, SMS and VOIP features. Hangouts Gdrive File management Google Drive is a file storage and synchronization service developed by Google. Gdrive Composer Dependency Manager for PHP Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install\/update) them for you. Composer Learn more Waffle.io Behat Drupal Git &amp; GitHub **Git branching model and naming convention ** master develop gh-pages dreamfony\/dv#XXX To link PR with issues on waffle a branch name has to look like this username\/repo#issueNumber Related issue: https:\/\/github.com\/waffleio\/waffle.io\/issues\/1899 Use of keywords (eg. close) in commit messages is not necessary. You can edit the ~\/.gitconfig file in your home folder. This is where all --global settings are saved. Travis CI Slack Acquia Hangouts Gdrive Composer BLT","tags":"","url":"tools.html"}]}